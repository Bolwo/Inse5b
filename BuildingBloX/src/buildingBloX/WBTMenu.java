/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package buildingBloX;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author up723003,up665478
 */
public class WBTMenu extends javax.swing.JFrame {

    /**
     * Creates new form WBTMenu
     */
    int height = 162;
    int rowCount = 5;
    ArrayList<String> mainList = new ArrayList<>();
    ArrayList<String> list = new ArrayList<>();
    ArrayList<Integer> rowsChecked = new ArrayList<>();
    boolean loops = false;

    public WBTMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moreTasksButton = new javax.swing.JButton();
        fieldHolder = new javax.swing.JScrollPane();
        taskHolder = new javax.swing.JPanel();
        task1Name = new javax.swing.JTextField();
        task1Dropdown = new javax.swing.JComboBox<>();
        task2Dropdown = new javax.swing.JComboBox<>();
        task3Dropdown = new javax.swing.JComboBox<>();
        task4Dropdown = new javax.swing.JComboBox<>();
        task5Dropdown = new javax.swing.JComboBox<>();
        task2Name = new javax.swing.JTextField();
        task3Name = new javax.swing.JTextField();
        task4Name = new javax.swing.JTextField();
        task5Name = new javax.swing.JTextField();
        task2Label = new javax.swing.JLabel();
        task1Label = new javax.swing.JLabel();
        task4Label = new javax.swing.JLabel();
        task3Label = new javax.swing.JLabel();
        task5Label = new javax.swing.JLabel();
        taskNameLabel = new javax.swing.JLabel();
        previousTaskLabel = new javax.swing.JLabel();
        taskLabel = new javax.swing.JLabel();
        createChartButton = new javax.swing.JButton();
        workBreakdownTreeLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        moreTasksButton.setText("More tasks");
        moreTasksButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moreTasksButtonMouseClicked(evt);
            }
        });

        fieldHolder.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        fieldHolder.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        taskHolder.setPreferredSize(new java.awt.Dimension(475, 225));

        task1Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                task1NameFocusLost(evt);
            }
        });

        task1Dropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        task1Dropdown.setEnabled(false);

        task2Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                task2NameFocusLost(evt);
            }
        });

        task3Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                task3NameFocusLost(evt);
            }
        });

        task4Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                task4NameFocusLost(evt);
            }
        });

        task5Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                task5NameFocusLost(evt);
            }
        });

        task2Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        task2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        task2Label.setText("2");

        task1Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        task1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        task1Label.setText("1");

        task4Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        task4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        task4Label.setText("4");

        task3Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        task3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        task3Label.setText("3");

        task5Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        task5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        task5Label.setText("5");

        org.jdesktop.layout.GroupLayout taskHolderLayout = new org.jdesktop.layout.GroupLayout(taskHolder);
        taskHolder.setLayout(taskHolderLayout);
        taskHolderLayout.setHorizontalGroup(
            taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(taskHolderLayout.createSequentialGroup()
                .addContainerGap()
                .add(taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(task3Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .add(task2Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(task1Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, task4Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, task5Label, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(6, 6, 6)
                .add(taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(task1Name)
                    .add(task2Name)
                    .add(task3Name)
                    .add(task4Name)
                    .add(task5Name, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(task5Dropdown, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(task4Dropdown, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(task3Dropdown, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(task2Dropdown, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(task1Dropdown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        taskHolderLayout.setVerticalGroup(
            taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(taskHolderLayout.createSequentialGroup()
                .add(10, 10, 10)
                .add(taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(task1Name, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(task1Dropdown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, task1Label))
                .add(18, 18, 18)
                .add(taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(task2Dropdown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(task2Name, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(task2Label))
                .add(18, 18, 18)
                .add(taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(task3Dropdown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(task3Name, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(task3Label))
                .add(18, 18, 18)
                .add(taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(task4Dropdown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(task4Name, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(task4Label))
                .add(18, 18, 18)
                .add(taskHolderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(task5Dropdown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(task5Name, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(task5Label))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        fieldHolder.setViewportView(taskHolder);

        taskNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        taskNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        taskNameLabel.setText("Task name");

        previousTaskLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        previousTaskLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        previousTaskLabel.setText("Previous task");

        taskLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        taskLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        taskLabel.setText("Task");

        createChartButton.setText("Create chart");
        createChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createChartButtonActionPerformed(evt);
            }
        });

        workBreakdownTreeLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        workBreakdownTreeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        workBreakdownTreeLabel.setText("Work Breakdown Tree");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(fieldHolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(9, 9, 9)
                        .add(moreTasksButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 242, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(createChartButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(taskLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(taskNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(previousTaskLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(backButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(workBreakdownTreeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 239, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(129, 129, 129)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(workBreakdownTreeLabel)
                    .add(backButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 24, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(taskNameLabel)
                    .add(previousTaskLabel)
                    .add(taskLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fieldHolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 225, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(moreTasksButton)
                    .add(createChartButton))
                .add(24, 24, 24))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void moreTasksButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moreTasksButtonMouseClicked
        increaseHeight();
        addElements();
    }//GEN-LAST:event_moreTasksButtonMouseClicked

    private void task1NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_task1NameFocusLost
        updateDropDown();
    }//GEN-LAST:event_task1NameFocusLost

    private void task2NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_task2NameFocusLost
        updateDropDown();
    }//GEN-LAST:event_task2NameFocusLost

    private void task3NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_task3NameFocusLost
        updateDropDown();
    }//GEN-LAST:event_task3NameFocusLost

    private void task4NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_task4NameFocusLost
        updateDropDown();
    }//GEN-LAST:event_task4NameFocusLost

    private void task5NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_task5NameFocusLost
        updateDropDown();
    }//GEN-LAST:event_task5NameFocusLost

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    MainMenu menu = new MainMenu();
                    menu.setVisible(true);
                }

            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(BuildingBloX.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void createChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createChartButtonActionPerformed
        if (validateInputs()) {
            //creat chart next window
        }
    }//GEN-LAST:event_createChartButtonActionPerformed

    /**
     * make the JPanel bigger for the next 5 elements to be added
     */
    public void increaseHeight() {
        int currentHeight = taskHolder.getHeight();
        taskHolder.setPreferredSize(new Dimension(475, currentHeight + 190));
    }

    /**
     * create 5 taskName labels of increasing number create 5 textFields for
     * taskName to be entered create 5 dropDowns for previousTask to be selected
     */
    public void addElements() {
        for (int i = 0; i < 5; i++) {
            height += 38;

            JLabel nextLabel = new JLabel(Integer.toString(++rowCount));
            nextLabel.setSize(25, 17);
            nextLabel.setLocation(20, height);
            nextLabel.setFont(new java.awt.Font("Tahoma", 0, 14));
            nextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

            JTextField nextText = new JTextField();
            nextText.setSize(200, 20);
            nextText.setLocation(61, height);
            nextText.addFocusListener(new FocusAdapter() {
                @Override
                public void focusLost(FocusEvent evt) {
                    updateDropDown();
                }
            });

            JComboBox nextDropdown = new JComboBox<>();
            nextDropdown.setSize(200, 20);
            nextDropdown.setLocation(271, height);

            taskHolder.add(nextLabel);
            taskHolder.add(nextText);
            taskHolder.add(nextDropdown);
        }
        pack();
    }

    /**
     * update values in all dropDown boxes with values in all textFields
     */
    public void updateDropDown() {
        int i = 0;
        //clear the template list
        mainList.clear();
        // compare all components on JPanel to see if its a textField
        // add all values from textFields to template
        for (Component C : taskHolder.getComponents()) {
            if (C instanceof JTextField) {
                String text = ((JTextField) C).getText().trim();
                if (!(text.equals(null))) {
                    mainList.add(text);
                    i++;
                } else {
                    mainList.add(i, "");
                    i++;
                }
            }
        }
        //remove all null values from template as textField is empty
        //remove dropdown option from textfield next to it
        int a = 1;
        for (Component C : taskHolder.getComponents()) {
            if (C instanceof JComboBox) {
                list = (ArrayList<String>) mainList.clone();
                list.remove(list.size() - a);
                list.removeAll(Arrays.asList(null, ""));

                String x = ((String) ((JComboBox) C).getSelectedItem());
                //cast component to JComboBox
                ((JComboBox) C).setModel(new DefaultComboBoxModel(list.toArray()));
                ((JComboBox) C).setSelectedItem(x);
                //set first dropDown as none

                task1Dropdown.addItem("None");
                task1Dropdown.setSelectedItem("None");
                a++;
            }
        }
    }

    /**
     * checks if a tree can be built, 2 or more tasks checks there is a root
     * task checks a dropdown selection is made checks for looping
     *
     * @return boolean true if inputs are valid
     */
    public boolean validateInputs() {
        if (list.size() < 2) {
            JOptionPane.showMessageDialog(this, "You need at least two tasks!", "", JOptionPane.INFORMATION_MESSAGE);
            return false;
        } else if (task1Name.getText() == null) {
            JOptionPane.showMessageDialog(this, "Please enter a root task in task 1.", "", JOptionPane.INFORMATION_MESSAGE);
            return false;
        } else if (adjacentDropdown()) {
            JOptionPane.showMessageDialog(this, "You have tasks without a previous task!", "", JOptionPane.INFORMATION_MESSAGE);
            return false;
        } else if (checkForLooping()) {
            System.out.println("Tefook.");
            return false;
        }
        System.out.println("Grats.");
        return true;
    }

    /**
     * check that a dropdown selection has been made when a task name is given
     *
     * @return boolean true if task name entered but no dropdown selected
     */
    public boolean adjacentDropdown() {
        for (Component C : taskHolder.getComponents()) {
            if (C instanceof JTextField && !(((JTextField) C).getText().trim().isEmpty())) {

                int textY = ((JTextField) C).getY();

                for (Component D : taskHolder.getComponents()) {
                    if ((D instanceof JComboBox) && (((JComboBox) D).getY() == textY) && (((JComboBox) D).getSelectedItem() == null)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * check for a loop where parent nodes don't connect to root
     *
     * @return boolean true there is a loop
     */
    public boolean checkForLooping() {
        loops = false;
        int a = 0;
        while ((a < rowCount) && !loops) {
            rowsChecked.clear();
            checkForLoops((48 + a * 38));
            a++;
        }
        return loops;
    }

    public void checkForLoops(int row) {
        for (Component D : taskHolder.getComponents()) {
            if ((D instanceof JComboBox) && (((JComboBox) D).getY() == row)) {
                JComboBox E = ((JComboBox) D);
                if (rowsChecked.contains(E.getY())) {
                    loops = true;
                } else {
                    int option = E.getSelectedIndex();
                    System.out.println(option);
                    ArrayList<String> list2 = (ArrayList<String>) mainList.clone();
                    int positionToFind = option;
                    list2.remove((row - 48) / 38);
                    int x = 0;
                    int fullListPosition = 0;
                    if (positionToFind < 0) {
                        while (fullListPosition < positionToFind) {
                            if (list2.get(x) == null) {
                                x++;
                            } else {
                                fullListPosition++;
                                x++;
                            }
                        }
                        x++;
                        if (x == 0) {

                        } else {
                            rowsChecked.add(row);
                            checkForLoops(48 + (x * 38));
                        }
                    }
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            System.out.println("1");
            java.util.logging.Logger.getLogger(WBTMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            System.out.println("2");
            java.util.logging.Logger.getLogger(WBTMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            System.out.println("3");
            java.util.logging.Logger.getLogger(WBTMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            System.out.println("4");
            java.util.logging.Logger.getLogger(WBTMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new WBTMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton createChartButton;
    private javax.swing.JScrollPane fieldHolder;
    private javax.swing.JButton moreTasksButton;
    private javax.swing.JLabel previousTaskLabel;
    private javax.swing.JComboBox<String> task1Dropdown;
    private javax.swing.JLabel task1Label;
    private javax.swing.JTextField task1Name;
    private javax.swing.JComboBox<String> task2Dropdown;
    private javax.swing.JLabel task2Label;
    private javax.swing.JTextField task2Name;
    private javax.swing.JComboBox<String> task3Dropdown;
    private javax.swing.JLabel task3Label;
    private javax.swing.JTextField task3Name;
    private javax.swing.JComboBox<String> task4Dropdown;
    private javax.swing.JLabel task4Label;
    private javax.swing.JTextField task4Name;
    private javax.swing.JComboBox<String> task5Dropdown;
    private javax.swing.JLabel task5Label;
    private javax.swing.JTextField task5Name;
    private javax.swing.JPanel taskHolder;
    private javax.swing.JLabel taskLabel;
    private javax.swing.JLabel taskNameLabel;
    private javax.swing.JLabel workBreakdownTreeLabel;
    // End of variables declaration//GEN-END:variables

}
